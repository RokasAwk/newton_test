// Mocks generated by Mockito 5.4.4 from annotations
// in newton_tech_app/test/domain/usecases/get_launches_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:newton_tech_app/domain/entity/launch_info.dart' as _i5;
import 'package:newton_tech_app/domain/repository/launch_repository.dart'
    as _i3;
import 'package:newton_tech_app/domain/usecases/common/server_error.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeServerError_0 extends _i1.SmartFake implements _i2.ServerError {
  _FakeServerError_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LaunchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLaunchRepository extends _i1.Mock implements _i3.LaunchRepository {
  @override
  _i4.Future<List<_i5.LaunchInfo>> getLaunches() => (super.noSuchMethod(
        Invocation.method(
          #getLaunches,
          [],
        ),
        returnValue: _i4.Future<List<_i5.LaunchInfo>>.value(<_i5.LaunchInfo>[]),
        returnValueForMissingStub:
            _i4.Future<List<_i5.LaunchInfo>>.value(<_i5.LaunchInfo>[]),
      ) as _i4.Future<List<_i5.LaunchInfo>>);
}

/// A class which mocks [ServerError].
///
/// See the documentation for Mockito's code generation for more information.
class MockServerError extends _i1.Mock implements _i2.ServerError {
  @override
  String get message => (super.noSuchMethod(
        Invocation.getter(#message),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#message),
        ),
      ) as String);
}

/// A class which mocks [ServerErrorFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockServerErrorFactory extends _i1.Mock
    implements _i2.ServerErrorFactory {
  @override
  _i2.ServerError create(String? message) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [message],
        ),
        returnValue: _FakeServerError_0(
          this,
          Invocation.method(
            #create,
            [message],
          ),
        ),
        returnValueForMissingStub: _FakeServerError_0(
          this,
          Invocation.method(
            #create,
            [message],
          ),
        ),
      ) as _i2.ServerError);

  @override
  _i2.ServerError generalCommonExceptionHandler(dynamic e) =>
      (super.noSuchMethod(
        Invocation.method(
          #generalCommonExceptionHandler,
          [e],
        ),
        returnValue: _FakeServerError_0(
          this,
          Invocation.method(
            #generalCommonExceptionHandler,
            [e],
          ),
        ),
        returnValueForMissingStub: _FakeServerError_0(
          this,
          Invocation.method(
            #generalCommonExceptionHandler,
            [e],
          ),
        ),
      ) as _i2.ServerError);
}
